openapi: 3.1.0
info:
  title: User Events
  version: 1.0.0
  description: OpenAPI definition for User event payloads (async communication)


paths: {}

components:
  schemas:
    UserCreatedEvent:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        user:
          $ref: '#/components/schemas/User'
      required:
        - userId
        - user


    UserUpdatedEvent:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        updatedAt:
          type: string
          format: date-time
      required:
        - userId
        - email
        - firstName
        - lastName
        - updatedAt


    CreateUserEvent:
      type: object
      description: Event payload for creating a new user
      properties:
        user:
          $ref: '#/components/schemas/User'
      required:
        - user

    UpdateUserEvent:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        updatedAt:
          type: string
          format: date-time
      required:
        - userId
        - email
        - firstName
        - lastName
        - updatedAt


    DisableUserEvent:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        email:
          type: string
        disabledAt:
          type: string
          format: date-time
      required:
        - userId
        - email
        - disabledAt


    EnableUserEvent:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        email:
          type: string
        enabledAt:
          type: string
          format: date-time
      required:
        - userId
        - email
        - enabledAt

    UserBankBranch:
      type: object
      properties:
        bankCode:
          type: string
          example: "BANK123"
          description: "Unique code for the bank"
        branchCode:
          type: string
          example: "BRANCH456"
          description: "Unique code for the bank branch"
        role:
          type: string
          example: "SUPERVISOR, HANDLER, MANAGER, AUDITOR..."
          description: "Role assigned to the user for this bank branch"
        roleDescription:
          type: string
          example: "Supervisor role with full access"
          description: "Description of the role assigned to the user for this bank branch"
      required:
        - bankCode
        - branchCode
        - role

    User:
      type: object
      properties:
        email:
          type: string
          format: email
          description: "User's email address"
        firstName:
          type: string
          description: "User's first name"
        lastName:
          type: string
          description: "User's last name"
        phoneNumber:
          type: string
          description: "User's phone number"
        address:
          type: string
          description: "User's address"
        city:
          type: string
          description: "User's city"
        birthDate:
          type: string
          format: date
          description: "User's date of birth in ISO format (YYYY-MM-DD)"
        gender:
          type: string
          description: "User's gender (e.g., male, famale, other)"
        taxId:
          type: string
          description: "User's tax identification number"
        userBankBranches:
          type: array
          items:
            $ref: '#/components/schemas/UserBankBranch'
      required:
        - email
        - firstName
        - lastName
        - phoneNumber
        - userBankBranches

